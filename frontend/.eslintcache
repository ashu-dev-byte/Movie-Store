[{"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/reportWebVitals.ts":"1","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/index.tsx":"2","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/App.tsx":"3","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Navbar/Navbar.tsx":"4","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Sidebar/Sidebar.tsx":"5","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Content/Content.tsx":"6","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Actor/Actor.tsx":"7","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Director/Director.tsx":"8","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Card/Card.tsx":"9","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Studio/Studio.tsx":"10","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Home/Home.tsx":"11","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Content/AddContent.tsx":"12","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Actor/AddActor.tsx":"13","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Director/AddDirector.tsx":"14","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Studio/AddStudio.tsx":"15","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Actor/ActorDetails.tsx":"16","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Director/DirectorDetails.tsx":"17","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Studio/StudioDetails.tsx":"18","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Content/ContentDetails.tsx":"19","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Select/ReactSelect.tsx":"20"},{"size":425,"mtime":1611690462607,"results":"21","hashOfConfig":"22"},{"size":501,"mtime":1613246555446,"results":"23","hashOfConfig":"22"},{"size":2481,"mtime":1624648393741,"results":"24","hashOfConfig":"25"},{"size":822,"mtime":1614603630896,"results":"26","hashOfConfig":"22"},{"size":1618,"mtime":1613482889816,"results":"27","hashOfConfig":"22"},{"size":1379,"mtime":1614601624161,"results":"28","hashOfConfig":"25"},{"size":1004,"mtime":1614599346785,"results":"29","hashOfConfig":"22"},{"size":1061,"mtime":1614602425730,"results":"30","hashOfConfig":"22"},{"size":1568,"mtime":1614583638545,"results":"31","hashOfConfig":"25"},{"size":877,"mtime":1614600016376,"results":"32","hashOfConfig":"22"},{"size":2732,"mtime":1613466455550,"results":"33","hashOfConfig":"22"},{"size":11464,"mtime":1614582710691,"results":"34","hashOfConfig":"22"},{"size":3266,"mtime":1613554494935,"results":"35","hashOfConfig":"22"},{"size":3329,"mtime":1613549129736,"results":"36","hashOfConfig":"22"},{"size":1694,"mtime":1613548982675,"results":"37","hashOfConfig":"22"},{"size":1241,"mtime":1614603148320,"results":"38","hashOfConfig":"22"},{"size":1295,"mtime":1614603125268,"results":"39","hashOfConfig":"25"},{"size":1167,"mtime":1614603076604,"results":"40","hashOfConfig":"25"},{"size":2118,"mtime":1614602992668,"results":"41","hashOfConfig":"22"},{"size":2193,"mtime":1614681847163,"results":"42","hashOfConfig":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wj8vkn",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1feodc3",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"85"},"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/reportWebVitals.ts",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/index.tsx",[],["86","87"],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/App.tsx",["88"],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Navbar/Navbar.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Sidebar/Sidebar.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Content/Content.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Actor/Actor.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Director/Director.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Card/Card.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Studio/Studio.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Home/Home.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Content/AddContent.tsx",["89","90","91","92","93","94","95","96","97","98"],"import React, { useEffect, useState } from \"react\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport ReactMultiSelectCheckboxes from \"react-multiselect-checkboxes\";\nimport Select from \"react-select\";\nimport { DIRECTOR_LIST_QUERY } from \"../Director/Director\";\nimport { STUDIO_LIST_QUERY } from \"../Studio/Studio\";\nimport { ACTOR_LIST_QUERY } from \"../Actor/Actor\";\nimport { CONTENT_LIST_QUERY } from \"./Content\";\nimport \"./Content.scss\";\n\nconst ADD_CONTENT_MUTATION = gql`\n  mutation addNewContent(\n    $name: String!\n    $contentCategory: String!\n    $yearOfRelease: Int!\n    $country: String!\n    $budget: Float!\n    $boxOfficeCollection: Float!\n    $boxOfficeStatus: String!\n    $genre: [String]!\n    $castId: [String]!\n    $directorId: String!\n    $studioId: String!\n  ) {\n    addContent(\n      name: $name\n      contentCategory: $contentCategory\n      yearOfRelease: $yearOfRelease\n      country: $country\n      budget: $budget\n      boxOfficeCollection: $boxOfficeCollection\n      boxOfficeStatus: $boxOfficeStatus\n      genre: $genre\n      castId: $castId\n      directorId: $directorId\n      studioId: $studioId\n    ) {\n      id\n      name\n    }\n  }\n`;\n\ninterface Props {}\n\ninterface KeyValueProps {\n  value: string;\n  label: string;\n}\n\ninterface ContentProps {\n  name: string;\n  contentCategory: string;\n  yearOfRelease: string;\n  country: string;\n  budget: string;\n  boxOfficeCollection: string;\n  boxOfficeStatus: string;\n  genre: string[];\n  castId: string[];\n  directorId: string;\n  studioId: string;\n}\n\nconst AddContent: React.FC<Props> = (props) => {\n  const [formData, setFormData] = useState<ContentProps>({\n    name: \"\",\n    contentCategory: \"\",\n    yearOfRelease: \"\",\n    country: \"\",\n    budget: \"\",\n    boxOfficeCollection: \"\",\n    boxOfficeStatus: \"\",\n    genre: [],\n    castId: [],\n    directorId: \"\",\n    studioId: \"\",\n  });\n\n  const { loading: directorDataLoading, data: directorData } = useQuery(\n    DIRECTOR_LIST_QUERY\n  );\n  const { loading: studioDataLoading, data: studioData } = useQuery(\n    STUDIO_LIST_QUERY\n  );\n  const { loading: actorDataLoading, data: actorData } = useQuery(\n    ACTOR_LIST_QUERY\n  );\n  const [addNewContent] = useMutation(ADD_CONTENT_MUTATION);\n  const actorList: KeyValueProps[] = [];\n  const studioList: KeyValueProps[] = [];\n  const directorList: KeyValueProps[] = [];\n  const [cast, setCast] = useState<KeyValueProps[]>([]);\n  const [genres, setGenres] = useState<KeyValueProps[]>([]);\n  const [studioId, setStudioId] = useState<KeyValueProps | null>(null);\n  const [directorId, setDirectorId] = useState<KeyValueProps | null>(null);\n\n  const genreOptions = [\n    { value: \"Sci-fi\", label: \"Sci-fi\" },\n    { value: \"Action\", label: \"Action\" },\n    { value: \"Thriller\", label: \"Thriller\" },\n    { value: \"Crime\", label: \"Crime\" },\n    { value: \"Drama\", label: \"Drama\" },\n    { value: \"Romance\", label: \"Romance\" },\n    { value: \"Fantasy\", label: \"Fantasy\" },\n    { value: \"Supernatural\", label: \"Supernatural\" },\n    { value: \"Horror\", label: \"Horror\" },\n    { value: \"Comedy\", label: \"Comedy\" },\n    { value: \"Psychological\", label: \"Psychological\" },\n    { value: \"Parody\", label: \"Parody\" },\n  ];\n\n  const handleDirectorSelection = (selectedOption) => {\n    setDirectorId(selectedOption);\n    if (selectedOption !== null) {\n      formData.directorId = selectedOption.value;\n    }\n  };\n\n  const handleStudioSelection = (selectedOption) => {\n    setStudioId(selectedOption);\n    if (selectedOption !== null) {\n      formData.studioId = selectedOption.value;\n    }\n  };\n\n  useEffect(() => {\n    const tempGenres: string[] = [];\n    genres.map((genre) => {\n      tempGenres.push(genre.value);\n    });\n    formData.genre = [...tempGenres];\n  }, [genres]);\n\n  useEffect(() => {\n    const tempCast: string[] = [];\n    cast.map((cas) => {\n      tempCast.push(cas.value);\n    });\n    formData.castId = [...tempCast];\n  }, [cast]);\n\n  useEffect(() => {\n    if (!actorDataLoading) {\n      actorData.actors.map((actor: { id: string; name: string }) => {\n        actorList.push({ value: actor.id, label: actor.name });\n      });\n    }\n\n    console.log(\"ActorList\", actorList);\n  }, [actorList]);\n\n  useEffect(() => {\n    if (!directorDataLoading) {\n      directorData.directors.map((director) => {\n        directorList.push({ value: director.id, label: director.name });\n      });\n    }\n  }, [directorList]);\n\n  useEffect(() => {\n    if (!studioDataLoading) {\n      studioData.studios.map((studio) => {\n        studioList.push({ value: studio.id, label: studio.name });\n      });\n    }\n  }, [studioList]);\n\n  const formSubmitHandler = (event: { preventDefault: () => void }) => {\n    event.preventDefault();\n    console.log(\"FormData: \", formData);\n\n    addNewContent({\n      variables: {\n        ...formData,\n        yearOfRelease: parseInt(formData.yearOfRelease),\n        budget: parseFloat(formData.budget),\n        boxOfficeCollection: parseFloat(formData.boxOfficeCollection),\n      },\n      refetchQueries: [{ query: CONTENT_LIST_QUERY }],\n    });\n\n    setCast([]);\n    setGenres([]);\n    setDirectorId(null);\n    setStudioId(null);\n    setFormData({\n      name: \"\",\n      contentCategory: \"\",\n      yearOfRelease: \"\",\n      country: \"\",\n      budget: \"\",\n      boxOfficeCollection: \"\",\n      boxOfficeStatus: \"\",\n      genre: [],\n      castId: [],\n      directorId: \"\",\n      studioId: \"\",\n    });\n  };\n\n  return (\n    <div className=\"addContent\">\n      <form className=\"formContainerContent\" onSubmit={formSubmitHandler}>\n        <h2>Add Content</h2>\n        <div className=\"formContentParent\">\n          <div className=\"formContentLeft\">\n            <div className=\"fieldItemContent\">\n              <label htmlFor=\"\">Name:</label>\n              <input\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) =>\n                  setFormData({ ...formData, name: e.target.value })\n                }\n              />\n            </div>\n\n            <div className=\"fieldItemActor\">\n              <label htmlFor=\"\">Content Type:</label>\n              <div className=\"radioItemsActor\">\n                <input\n                  type=\"radio\"\n                  name=\"contentType\"\n                  value=\"Movie\"\n                  checked={formData.contentCategory === \"Movie\"}\n                  onChange={(e) =>\n                    setFormData({\n                      ...formData,\n                      contentCategory: e.target.value,\n                    })\n                  }\n                />\n                <label htmlFor=\"male\">Movie</label>\n                <input\n                  type=\"radio\"\n                  name=\"contentType\"\n                  value=\"Web Series\"\n                  checked={formData.contentCategory === \"Web Series\"}\n                  onChange={(e) =>\n                    setFormData({\n                      ...formData,\n                      contentCategory: e.target.value,\n                    })\n                  }\n                />\n                <label htmlFor=\"female\">Web Series</label>\n              </div>\n            </div>\n\n            <div className=\"fieldItemContent\">\n              <label htmlFor=\"\">Year of Release:</label>\n              <input\n                type=\"text\"\n                value={formData.yearOfRelease}\n                onChange={(e) =>\n                  setFormData({ ...formData, yearOfRelease: e.target.value })\n                }\n              />\n            </div>\n\n            <div className=\"fieldItemContent\">\n              <label htmlFor=\"\">Country:</label>\n              <input\n                type=\"text\"\n                value={formData.country}\n                onChange={(e) =>\n                  setFormData({ ...formData, country: e.target.value })\n                }\n              />\n            </div>\n\n            <div className=\"fieldItemContent\">\n              <label htmlFor=\"\">Budget:</label>\n              <input\n                type=\"text\"\n                value={formData.budget}\n                onChange={(e) =>\n                  setFormData({ ...formData, budget: e.target.value })\n                }\n              />\n            </div>\n\n            <div className=\"fieldItemContent\">\n              <label htmlFor=\"\">Box-Office Colection:</label>\n              <input\n                type=\"text\"\n                value={formData.boxOfficeCollection}\n                onChange={(e) =>\n                  setFormData({\n                    ...formData,\n                    boxOfficeCollection: e.target.value,\n                  })\n                }\n              />\n            </div>\n          </div>\n          <div className=\"formContentRight\">\n            <div className=\"fieldItemContent\">\n              <label htmlFor=\"\">Box-Office Status:</label>\n              <select\n                className=\"customSelect\"\n                name=\"boxOfficeStatus\"\n                value={formData.boxOfficeStatus}\n                onChange={(e) =>\n                  setFormData({ ...formData, boxOfficeStatus: e.target.value })\n                }\n              >\n                <option value=\"\" disabled selected hidden>\n                  Choose a category\n                </option>\n                <option value=\"BlockBuster\">BlockBuster</option>\n                <option value=\"SuperHit\">SuperHit</option>\n                <option value=\"Hit\">Hit</option>\n                <option value=\"Average\">Average</option>\n                <option value=\"Flop\">Flop</option>\n                <option value=\"Disaster\">Disaster</option>\n              </select>\n            </div>\n\n            <div className=\"fieldItemContent\">\n              <label htmlFor=\"\">Genre:</label>\n              <ReactMultiSelectCheckboxes\n                className=\"multiSelectCheckboxes\"\n                width={365}\n                value={genres}\n                onChange={setGenres}\n                placeholderButtonLabel=\"Select genre(s)\"\n                options={genreOptions}\n              />\n            </div>\n\n            <div className=\"fieldItemContent\">\n              <label htmlFor=\"\">Cast:</label>\n              <ReactMultiSelectCheckboxes\n                className=\"multiSelectCheckboxes\"\n                width={365}\n                value={cast}\n                onChange={setCast}\n                placeholderButtonLabel=\"Select cast\"\n                options={actorList}\n              />\n            </div>\n\n            <div className=\"fieldItemContent\">\n              <label htmlFor=\"\">Director:</label>\n              <Select\n                className=\"basicSingle\"\n                placeholder=\"Select Director\"\n                name=\"director\"\n                value={directorId}\n                onChange={handleDirectorSelection}\n                options={directorList}\n                isClearable\n                isSearchable\n              />\n            </div>\n\n            <div className=\"fieldItemContent\">\n              <label htmlFor=\"\">Studio:</label>\n              <Select\n                className=\"basicSingle\"\n                placeholder=\"Select Studio\"\n                name=\"studio\"\n                value={studioId}\n                onChange={handleStudioSelection}\n                options={studioList}\n                isClearable\n                isSearchable\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldItemContent\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AddContent;\n","/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Actor/AddActor.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Director/AddDirector.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Studio/AddStudio.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Actor/ActorDetails.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Director/DirectorDetails.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Studio/StudioDetails.tsx",[],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Content/ContentDetails.tsx",["99"],"/home/ashutosh/Documents/Projects/Movie-Store/frontend/src/components/Select/ReactSelect.tsx",["100","101"],"import React, { useState } from \"react\";\nimport cx from \"classnames\";\nimport { FaChevronDown } from \"react-icons/fa\";\nimport \"./Select.scss\";\n\nconst options = [\n  {\n    lable: \"One\",\n    value: \"One\",\n  },\n  {\n    value: \"Two\",\n    lable: \"Two\",\n  },\n  {\n    lable: \"Three\",\n    value: \"Three\",\n  },\n  {\n    lable: \"Four\",\n    value: \"Four\",\n  },\n  {\n    lable: \"Five\",\n    value: \"Five\",\n  },\n  {\n    lable: \"Six\",\n    value: \"Six\",\n  },\n  {\n    lable: \"Seven\",\n    value: \"Seven\",\n  },\n  {\n    lable: \"Eight\",\n    value: \"Eight\",\n  },\n  {\n    lable: \"Nine\",\n    value: \"Nine\",\n  },\n  {\n    lable: \"Ten\",\n    value: \"Ten\",\n  },\n  {\n    lable: \"Eleven\",\n    value: \"Eleven\",\n  },\n  {\n    lable: \"Twelve\",\n    value: \"Twelve\",\n  },\n  {\n    lable: \"Thirteen\",\n    value: \"Thirteen\",\n  },\n  {\n    lable: \"Fourteen\",\n    value: \"Fourteen\",\n  },\n  {\n    lable: \"Fifteen\",\n    value: \"Fifteen\",\n  },\n];\n\ninterface Props {}\n\nconst ReactSelect: React.FC<Props> = (props) => {\n  const [isSelectOpen, setIsSelectOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(\"Select option\");\n\n  return (\n    <div className=\"container\">\n      <div className=\"selectBox\">\n        <div\n          className=\"selected\"\n          onClick={() => setIsSelectOpen(!isSelectOpen)}\n        >\n          <label>\n            {selectedValue}\n            <FaChevronDown\n              size={18}\n              className={cx(\"icon\", { [\"iconActive\"]: isSelectOpen })}\n            />\n          </label>\n        </div>\n\n        <div className={cx(\"optionsList\", { [\"optionsActive\"]: isSelectOpen })}>\n          {options.map((option) => (\n            <div\n              className=\"option\"\n              onClick={() => {\n                setSelectedValue(option.value);\n                setIsSelectOpen(false);\n              }}\n            >\n              <label>\n                <input\n                  type=\"radio\"\n                  className=\"radioBtn\"\n                  value={option.value}\n                  name=\"radioGroup\"\n                />\n              </label>\n              {option.lable}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReactSelect;\n",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":20,"column":8,"nodeType":"108","messageId":"109","endLine":20,"endColumn":19},{"ruleId":"110","severity":1,"message":"111","line":129,"column":24,"nodeType":"112","messageId":"113","endLine":129,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":133,"column":6,"nodeType":"116","endLine":133,"endColumn":14,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"111","line":137,"column":20,"nodeType":"112","messageId":"113","endLine":137,"endColumn":22},{"ruleId":"114","severity":1,"message":"115","line":141,"column":6,"nodeType":"116","endLine":141,"endColumn":12,"suggestions":"118"},{"ruleId":"110","severity":1,"message":"111","line":145,"column":66,"nodeType":"112","messageId":"113","endLine":145,"endColumn":68},{"ruleId":"114","severity":1,"message":"119","line":151,"column":6,"nodeType":"116","endLine":151,"endColumn":17,"suggestions":"120"},{"ruleId":"110","severity":1,"message":"111","line":155,"column":45,"nodeType":"112","messageId":"113","endLine":155,"endColumn":47},{"ruleId":"114","severity":1,"message":"121","line":159,"column":6,"nodeType":"116","endLine":159,"endColumn":20,"suggestions":"122"},{"ruleId":"110","severity":1,"message":"111","line":163,"column":39,"nodeType":"112","messageId":"113","endLine":163,"endColumn":41},{"ruleId":"114","severity":1,"message":"123","line":167,"column":6,"nodeType":"116","endLine":167,"endColumn":18,"suggestions":"124"},{"ruleId":"106","severity":1,"message":"125","line":5,"column":8,"nodeType":"108","messageId":"109","endLine":5,"endColumn":16},{"ruleId":"126","severity":1,"message":"127","line":86,"column":39,"nodeType":"128","messageId":"129","endLine":86,"endColumn":67,"fix":"130"},{"ruleId":"126","severity":1,"message":"131","line":91,"column":45,"nodeType":"128","messageId":"129","endLine":91,"endColumn":76,"fix":"132"},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"@typescript-eslint/no-unused-vars","'ReactSelect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array.","ArrayExpression",["135"],["136"],"React Hook useEffect has missing dependencies: 'actorData.actors' and 'actorDataLoading'. Either include them or remove the dependency array.",["137"],"React Hook useEffect has missing dependencies: 'directorData.directors' and 'directorDataLoading'. Either include them or remove the dependency array.",["138"],"React Hook useEffect has missing dependencies: 'studioData.studios' and 'studioDataLoading'. Either include them or remove the dependency array.",["139"],"'Director' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"iconActive\"] found.","Property","unnecessarilyComputedProperty",{"range":"140","text":"141"},"Unnecessarily computed property [\"optionsActive\"] found.",{"range":"142","text":"143"},"no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},[1422,1436],"\"iconActive\"",[1549,1566],"\"optionsActive\"","Update the dependencies array to be: [formData, genres]",{"range":"154","text":"155"},"Update the dependencies array to be: [cast, formData]",{"range":"156","text":"157"},"Update the dependencies array to be: [actorData.actors, actorDataLoading, actorList]",{"range":"158","text":"159"},"Update the dependencies array to be: [directorData.directors, directorDataLoading, directorList]",{"range":"160","text":"161"},"Update the dependencies array to be: [studioData.studios, studioDataLoading, studioList]",{"range":"162","text":"163"},[3721,3729],"[formData, genres]",[3894,3900],"[cast, formData]",[4150,4161],"[actorData.actors, actorDataLoading, actorList]",[4360,4374],"[directorData.directors, directorDataLoading, directorList]",[4559,4571],"[studioData.studios, studioDataLoading, studioList]"]